//We were inspired by this website https://github.com/SparkBuzzer/Arduino-projects/blob/master/HC-SR04_Ultrasonic_sensor_with_LCD/Ultrasonic_sensor_with_LCD/Ultrasonic_sensor_with_LCD.ino. However the program didnâ€™t work so we had to add more and fill in the requirements that we needed to achieve. 



// LCD AND ULTRASONIC SENSOR and buzer- FINAL//

// include the library code:
#include <LiquidCrystal.h>


#define echoPin 10 // attach pin D2 Arduino to pin Echo of HC-SR04
#define trigPin 9 //attach pin D3 Arduino to pin Trig of HC-SR04
const int buzzer = 8; //buzzer to arduino pin 8
const int dist_threshold2 = 50;
const int dist_threshold1 = 20;


// defines variables
long duration; // variable for the duration of sound wave travel
int distance; // variable for the distance measurement

// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);


void setup()
{  
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(buzzer,OUTPUT);
  lcd.begin(16,2); //Tell Arduino to start your 16 column 2 row LCD
  lcd.setCursor(0,0);  //Set LCD cursor to upper left corner, column 0, row 0
  lcd.print("Num:888-709-4871");  //Print Message on First Row; EMERGENCY CONTACT
}

void loop() {
  long duration, distance;
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration/2) / 29.1;
 
  lcd.setCursor(0,1);  //Set cursor to first column of second row
  lcd.print("                "); //Print blanks to clear the row
  lcd.setCursor(0,1);   //Set Cursor again to first column of second row
  lcd.print(String("Dist: ") + String(distance)); //Print measured distance
  lcd.print(" cm");  //Print your units.

   if (distance < dist_threshold2) {
    tone(buzzer, 1000); // Send 1KHz sound signal
    delay(100);        // for 100 microseconds
    noTone(buzzer);     // Stop sound
    delay(100);        // for 100 microseconds
  }
 
  if (distance < dist_threshold1) {
    tone(buzzer, 1000); // Send 1KHz sound signal
    delay(50);        // for 50 microseconds
    noTone(buzzer);     // Stop sound
    delay(50);        // for 50 microseconds
  }
 
 
  delay(250); //pause to let things settle
}


//end
